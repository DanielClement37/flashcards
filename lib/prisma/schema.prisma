generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  decks         Deck[]
  cards         Card[]
  folders       Folder[]
  likes         Like?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(uuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             String    @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           String  @id @default(uuid())
  userId       String      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         String  @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Deck {
  id          String  @id @default(uuid())
  owner       User    @relation(fields: [ownerId], references: [id])
  ownerId     String  @map(name: "user_id")
  isPrivate   Boolean
  views       Int?
  rating      Int?
  description String
  title       String
  category    Category  @default(OTHER)
  cards       Card[]
  folders     Folder[]
  likes       Like[]
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")
}

model Card {
  id          String  @id @default(uuid())
  deck        Deck    @relation(fields: [deckId], references: [id])
  deckId      String  
  author      User    @relation(fields: [authorId], references: [id])
  authorId    String
  front       String
  back        String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")
}

model Folder {
  folderId    String    @id @default(uuid())
  decks       Deck[]    
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")
}

model Like {
  likeId      String    @id @default(uuid())
  decks       Deck[]
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @map(name: "updated_at")
}



enum Category {
  OTHER
  COMPUTER_SCIENCE
  BIOLOGY
  CHEMISTRY
  PHYSICS
  ALGEBRA
  GEOMETRY
  CALCULUS
  ENGLISH
  SPANISH
  ANATOMY
  MEDICINE
  HISTORY
}